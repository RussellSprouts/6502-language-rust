use std::i64;
use super::AstNode;
use super::Expression;
use std::rc::Rc;

whitespace = #quiet<[ \n\r\t]+>
identifier_char = [a-zA-Z0-9_$%]

hex_literal -> i64 = ("0x" / "$") n:$([0-9a-fA-F]+) !identifier_char whitespace* { i64::from_str_radix(n, 16).unwrap() }
binary_literal -> i64 = ("0b" / '%') n:$([01]+) !identifier_char whitespace* { i64::from_str_radix(n, 2).unwrap() }
decimal_literal -> i64 = n:$([0-9]+) !identifier_char whitespace* { i64::from_str_radix(n, 10).unwrap() }

pub numeric_literal -> i64 = hex_literal / binary_literal / decimal_literal

op<E> = E whitespace*
keyword<E> = E !identifier_char whitespace*

IF = keyword<"if">
FN = keyword<"fn">
LPAREN = op<"(">
RPAREN = op<")">
LBRACE = op<"{">
RBRACE = op<"}">
RETURNS = op<"->">

IDENTIFIER -> String = s:$([a-zA-Z_][a-zA-Z0-9_]*) { s.to_string() }

pub block -> AstNode = LBRACE stmts:(statement*) RBRACE {
    AstNode::Block { statements: stmts.into_iter().map(|s| Rc::new(s)).collect() }
}

pub expression -> Expression = n:numeric_literal { Expression::Integer(n) }

pub if_statement -> AstNode = IF LPAREN e:expression RPAREN s:statement {
    AstNode::If {
        condition: Rc::new(e),
        statement: Rc::new(s)
    }
}

pub fn_definition -> AstNode = FN i:IDENTIFIER LPAREN RPAREN RETURNS r:IDENTIFIER {
    AstNode::FnDef {
        name: i
    }
}

pub statement -> AstNode = if_statement / block