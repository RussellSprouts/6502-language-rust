#![arguments(ast: &'a Ast<'a>)]

use std::i64;
use super::Type;
use super::Ast;
use super::TypeArg;
use super::UnaryOp;
use super::BinaryOp;
use super::AstCreate;
use super::Expression2;
use super::Expression2Type;

whitespace = #quiet<[ \n\r\t]+>
identifier_char = [a-zA-Z0-9_$%]

hex_literal -> i64 = ("0x" / "$") n:$([0-9a-fA-F]+) !identifier_char whitespace* { i64::from_str_radix(n, 16).unwrap() }
binary_literal -> i64 = ("0b") n:$([01]+) !identifier_char whitespace* { i64::from_str_radix(n, 2).unwrap() }
decimal_literal -> i64 = n:$([0-9]+) !identifier_char whitespace* { i64::from_str_radix(n, 10).unwrap() }

pub numeric_literal -> i64 = hex_literal / binary_literal / decimal_literal

op<E> = p:#position E whitespace* { p }
keyword<E> = p:#position E !identifier_char whitespace* { p }

IF -> usize = keyword<"if">
ELSE -> usize = keyword<"else">
FN -> usize = keyword<"fn">
AS -> usize = keyword<"as">
RETURN -> usize = keyword<"return">
LET -> usize = keyword<"let">
STRUCT -> usize = keyword<"struct">
FOR -> usize = keyword<"for">

keyword = IF / ELSE / FN / AS / RETURN / LET / STRUCT / FOR

LPAREN -> usize = op<"(">
RPAREN -> usize = op<")">
LBRACE -> usize = op<"{">
RBRACE -> usize = op<"}">
LSQUARE -> usize = op<"[">
RSQUARE -> usize = op<"]">
RETURNS -> usize = op<"->">
DOT -> usize = op<".">
EQUALS -> usize = op<"=">
COMMA -> usize = op<",">
COLON -> usize = op<":">
SEMI -> usize = op<";">
LT -> usize = op<"<">
GT -> usize = op<">">

IDENTIFIER -> String = !keyword s:$([a-zA-Z_][a-zA-Z0-9_]*) whitespace* { s.to_string() }

pub program -> Expression2<'a> = whitespace* stmts:(expression ** SEMI) term: SEMI? {
  let statements: Vec<&'a Expression2<'a>> = stmts.into_iter().map(|s| { ast.create(&s) }).collect();

  Expression2 {
    is: Expression2Type::Block {
      body: ast.create(&statements),
      semi_terminated: term.is_some()
    },
    loc: 0,
    id: ast.id()
  }
}

pub for_loop -> Expression2<'a> = loc:FOR LPAREN var:IDENTIFIER COLON iter:expression RPAREN body:expression {
  Expression2 {
    is: Expression2Type::For {
      var: ast.create(&var),
      iter: ast.create(&iter),
      body: ast.create(&body)
    },
    loc,
    id: ast.id()
  } 
}

pub number_literal_expression -> Expression2<'a> = loc:#position value:numeric_literal {
    Expression2 { is: Expression2Type::Integer(value), loc, id: ast.id() }
}

pub identifier_expression -> Expression2<'a> = loc:#position name:IDENTIFIER {
    Expression2 {
        is: Expression2Type::Identifier(ast.create(&name)),
        loc,
        id: ast.id()
    }
}

pub block -> Expression2<'a> = loc:LBRACE stmts:(expression ** SEMI) term:SEMI? RBRACE {
  let statements: Vec<&'a Expression2<'a>> = stmts.into_iter().map(|s| { ast.create(&s) }).collect();

  Expression2 {
    is: Expression2Type::Block {
      body: ast.create(&statements),
      semi_terminated: term.is_some()
    },
    loc, id: ast.id()
  }
}

pub paren_expression -> Expression2<'a> = LPAREN e:expression RPAREN { e }

pub expression_atom -> Expression2<'a> = number_literal_expression / identifier_expression / paren_expression / if_expression / fn_definition / block / for_loop / struct_definition / let_expression / return_expression

arg_name -> &'a str = n:IDENTIFIER COLON { ast.create(&n) }
pub arg -> (Option<&'a str>, &'a Expression2<'a>) = n:arg_name? e:expression { (n, ast.create(&e)) }

pub if_expression -> Expression2<'a> = loc:IF LPAREN condition:expression RPAREN c:expression a:(ELSE a:expression {a})? {
  Expression2 {
    is: Expression2Type::If {
      condition: ast.create(&condition),
      consequent: ast.create(&c),
      alternate: a.map(|alternate| { ast.create(&alternate) })
    },
    loc,
    id: ast.id()
  }
}

pub call_expression -> Expression2<'a> = c:expression_atom loc:LPAREN args:(arg ** COMMA) COMMA? RPAREN {
  Expression2 {
    is: Expression2Type::Call {
      callee: ast.create(&c),
      args: ast.create(&args),
    },
    loc,
    id: ast.id()
  }
}

pub unary_op -> UnaryOp = op:$("<-" / [\~\!\-\*\&]) whitespace* {
    match op.trim() {
        "<-" => UnaryOp::IORead,
        "~" => UnaryOp::BitwiseNot,
        "!" => UnaryOp::LogicalNot,
        "*" => UnaryOp::Indirect,
        "&" => UnaryOp::AddressOf,
        "-" => UnaryOp::Minus,
        _ => panic!("shouldn't get here {}", op)
    }
}

pub subscript_expression -> Expression2<'a> = a:expression_atom loc:LSQUARE i:expression RSQUARE {
  Expression2 {
    is: Expression2Type::ArrayAccess {
      array: ast.create(&a),
      index: ast.create(&i),
    },
    loc,
    id: ast.id()
  }
}

pub dot_expression -> Expression2<'a> = e:expression_atom loc:DOT p:IDENTIFIER {
    Expression2 {
      is: Expression2Type::Dot {
        expression: ast.create(&e),
        property: ast.create(&p),
      },
      loc,
      id: ast.id()
    }
}

pub return_expression -> Expression2<'a> = loc:RETURN e:expression {
  Expression2 {
    is: Expression2Type::Return {
      value: ast.create(&e)
    },
    loc,
    id: ast.id()
  }
}

pub struct_initialization -> Expression2<'a> = c:type_value loc:LBRACE args:(arg ** COMMA) RBRACE {
  Expression2 {
    is: Expression2Type::StructInitialization {
      struct_type: c,
      args: ast.create(&args),
    },
    loc,
    id: ast.id()
  }
}

pub expression_level1 -> Expression2<'a> = call_expression / subscript_expression / dot_expression / struct_initialization / expression_atom

pub unary_op_expression -> Expression2<'a> = loc:#position op:unary_op e:expression_level1 {
    Expression2 {
      is: Expression2Type::UnaryOp {
        expression: ast.create(&e),
        op: op,
      },
      loc,
      id: ast.id()
    }
}

pub cast_expression -> Expression2<'a> = expr:expression_level1 loc:AS t:type_value {
    Expression2 {
      is: Expression2Type::Cast {
        ex: ast.create(&expr),
        new_type: t
      },
      loc,
      id: ast.id()
    }
}

pub expression_level2 -> Expression2<'a> = unary_op_expression / cast_expression / expression_level1

pub binop_expression -> Expression2<'a> = #infix<expression_level2> {
    #L a loc:op<"=">  b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::Assignment, a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
       a loc:op<"<-"> b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::IOWrite,    a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
    #L a loc:op<"||"> b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::LogicalOr,  a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
    #L a loc:op<"&&"> b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::LogicalAnd, a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
    #L a loc:op<"|">  b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::BitwiseOr,  a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
    #L a loc:op<"^">  b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::BitwiseXor, a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
    #L a loc:op<"&">  b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::BitwiseAnd, a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
    #L a loc:op<"=="> b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::Equal,      a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
       a loc:op<"!="> b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::NotEqual,   a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
    #L a loc:op<"<="> b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::LE,         a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
       a loc:op<"<">  b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::LT,         a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
       a loc:op<">="> b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::GE,         a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
       a loc:op<">">  b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::GT,         a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
    #L a loc:op<">>"> b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::RShift,     a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
       a loc:op<"<<"> b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::LShift,     a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
    #L a loc:op<"+">  b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::Plus,       a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
       a loc:op<"-">  b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::Minus,      a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
    #L a loc:op<"*">  b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::Times,      a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
       a loc:op<"/">  b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::Divide,     a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
       a loc:op<"%">  b { Expression2 { is: Expression2Type::BinaryOp { op: BinaryOp::Mod,        a: ast.create(&a), b: ast.create(&b)}, loc, id: ast.id() } }
}

pub let_expression -> Expression2<'a> = loc:LET var:IDENTIFIER COLON declared_type:type_value? maybe_init:(EQUALS init:expression {init})? {?
  if let Some(init) = maybe_init {
    Ok(Expression2 {
      is: Expression2Type::LetWithInitializer {
        var: ast.create(&var), declared_type, init: ast.create(&init)
      },
      loc,
      id: ast.id()
    })
  } else if let Some(of_type) = declared_type {
    Ok(Expression2 {
      is: Expression2Type::Let {
        var: ast.create(&var), declared_type: of_type
      },
      loc,
      id: ast.id()
    })
  } else {
    Err("Let without initializer must declare a type.")
  }
}

pub expression -> Expression2<'a> = binop_expression / expression_level2

pub fn_arg -> (&'a str, Type<'a>) = n:IDENTIFIER COLON t:type_value {
  (ast.create(&n), t)
}

pub fn_definition -> Expression2<'a> = loc:FN i:IDENTIFIER? LPAREN args:(fn_arg ** COMMA) COMMA? RPAREN t:(RETURNS t:type_value {t})? b:block {
  Expression2 {
    is: Expression2Type::Function {
      name: match i { Some(name) => Some(ast.create(&name)), None => None},
      args: ast.create(&*args),
      return_type: if (t.is_some()) { t.unwrap() } else { Type::Identifier(ast.create(&"void".to_string())) },
      body: ast.create(&b),
    },
    loc,
    id: ast.id()
  }
}

fields -> Vec<(&'a str, Type<'a>)> = (name:IDENTIFIER COLON declared_type: type_value SEMI { (ast.create(&*name), declared_type) })*

pub struct_definition -> Expression2<'a> = loc:STRUCT name:IDENTIFIER LBRACE fields:fields RBRACE {
  Expression2 {
    is: Expression2Type::StructDefinition {
      name: ast.create(&name),
      fields: ast.create(&fields),
    },
    loc,
    id: ast.id()
  }
}

pub anonymous_struct_definition -> Type<'a> = STRUCT LBRACE fields:fields RBRACE {
    Type::AnonymousStruct(ast.create(&fields))
}

pub identifier_type -> Type<'a> = t:IDENTIFIER {
    Type::Identifier(ast.create(&t))
}

pub type_arg -> TypeArg<'a> = name:arg_name? value:type_value {
    TypeArg {
        name: name.map(|n| { ast.create(&*n) }),
        value
    }
}

pub generic_type -> Type<'a> = name:IDENTIFIER LT args:type_arg* GT {
    Type::GenericType {
        name: ast.create(&name),
        args: ast.create(&args)
    }
}

pub type_value -> Type<'a> = generic_type / identifier_type / anonymous_struct_definition